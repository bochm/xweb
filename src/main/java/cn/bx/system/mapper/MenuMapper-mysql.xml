<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.bx.system.mapper.MenuMapper"> 
    <sql id="menuColumns">
    	a.id,a.parent_id "parent.id",a.parent_tree,a.name,a.target,a.icon,a.sort,a.type,a.permission,
		a.remarks,p.name AS "parent.name",a.status
    </sql>
    <sql id="menuJoins">
		left join sys_menu p on p.id = a.parent_id
    </sql>
    <select id="get" resultType="cn.bx.system.entity.Menu">
		select <include refid="menuColumns"/>
		from sys_menu a
		<include refid="menuJoins"/>
		where a.id = #{id}
	</select>
    <select id="list" resultType="cn.bx.system.entity.Menu">
		select <include refid="menuColumns"/>
		from sys_menu a
		<include refid="menuJoins"/>
		order by a.parent_tree
	</select>
	<select id="selectAllMenuTree" parameterType="map" resultType="map">
		select id,name,parent_id,icon icons,parent_tree,sort from sys_menu
		<where>
			<if test="id != null and id != ''">
				parent_id = #{parentMenu}
			</if>
			<if test="parentMenu != null and parentMenu != ''">
				locate(#{parentMenu}, parent_tree) = 0 and id != #{parentMenu}
			</if>
		</where>
	</select>
	<insert id="add">
		insert into sys_menu(id,parent_id,parent_tree, name, target, icon, sort, type, permission, create_by, create_date, update_by, update_date, remarks, status)
		values(#{id},#{parentId},#{parentTree},#{name},#{target},#{icon},#{sort},#{type},#{permission},#{createBy},#{createDate},#{updateBy},#{updateDate},
		#{remarks},#{status})
	</insert>
	
	<update id="save">
		update sys_menu set parent_id = #{parentId},parent_tree = #{parentTree},
		name = #{name}, target = #{target}, icon = #{icon}, sort = #{sort}, type = #{type}, 
		permission = #{permission}, update_by = #{updateBy}, update_date = #{updateDate}, 
		remarks = #{remarks}, status = #{status} where id = #{id}
	</update>
	<update id="updateChildren" parameterType="map">
		update sys_menu set parent_tree = replace(parent_tree,#{old.treeSort},#{new.treeSort})
		where locate(#{new.id}, parent_tree) > 0
	</update>
	
	<delete id="removeList">
		delete from  sys_menu where id in
		<foreach collection="array" item="id" open="(" close=")" separator=",">#{id}</foreach>
	</delete>
	<delete id="removeChildren">
		delete from  sys_menu where locate(#{id}, parent_tree) > 0
	</delete>
</mapper>